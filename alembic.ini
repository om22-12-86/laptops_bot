# Основная конфигурация для Alembic

[alembic]
# Путь к миграционным скриптам. Используйте косые черты (/) даже на Windows, чтобы обеспечить кросс-платформенность.
script_location = alembic

# Шаблон для именования миграционных файлов. По умолчанию %%(rev)s_%%(slug)s
# Можно раскомментировать и настроить, если нужно использовать временную метку в имени.
# Например: %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s
# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# Добавление пути к системе, чтобы указать местоположение импорта моделей.
# Обычно оставляют текущую директорию.
prepend_sys_path = .

# Таймзона для работы с датой и временем в миграционных скриптах.
# Если не указывать, будет использовано локальное время.
# Для поддержки потребуется python>=3.9 и библиотеки backports.zoneinfo и tzdata
# timezone =

# Ограничение на длину символов в "slug" (отображаемое имя миграции).
# Текущая длина по умолчанию 40.
# truncate_slug_length = 40

# Этот параметр управляет запуском миграции при использовании команды 'revision', если 'autogenerate' отключен.
# В большинстве случаев оставляем в false.
# revision_environment = false

# Если нужно разрешить файлы .pyc или .pyo без исходных файлов .py быть обнаруженными как миграции, активируйте.
# sourceless = false

# Путь к директориям с версиями миграций. Обычно это 'alembic/versions'.
# В случае использования нескольких директорий необходимо указать их через 'version-path'.
# version_locations = %(here)s/bar:%(here)s/bat:alembic/versions

# Разделитель путей к версиям. Обычно используем 'os' для разделения с учетом операционной системы.
version_path_separator = os

# Указывает, нужно ли рекурсивно искать версии в указанных директориях.
# Это новое в версии Alembic 1.10
# recursive_version_locations = false

# Кодировка вывода для файлов миграции.
output_encoding = utf-8

# URL подключения к базе данных. Здесь используется PostgreSQL с асинхронным драйвером asyncpg.
# Подключение: postgresql+asyncpg://<пользователь>:<пароль>@<хост>:<порт>/<база данных>
sqlalchemy.url = postgresql+asyncpg://ltbot:bot@localhost/bot_db

# Включение скриптов, которые будут запускаться после записи новых миграционных скриптов.
# Пример: форматирование кода с использованием black или линтинг с использованием ruff.
[post_write_hooks]
# hooks = black
# black.type = console_scripts
# black.entrypoint = black
# black.options = -l 79 REVISION_SCRIPT_FILENAME
# hooks = ruff
# ruff.type = exec
# ruff.executable = %(here)s/.venv/bin/ruff
# ruff.options = --fix REVISION_SCRIPT_FILENAME

# Логирование конфигурации
[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARNING
handlers = console
qualname =

[logger_sqlalchemy]
level = WARNING
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
